# Created by Aaron James Long - 2019- RAL (ISIS) - Experimental Controls Group
#=============================================================================
# JASCO HPLC PU-4180 Pump IOC - Requires jsco4180.proto

#################################
# 1. COMMON RECORDS
#################################
#
record(bo, "$(P)SIM")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
    field(ZNAM, "NO")
    field(ONAM, "YES")
    field(VAL, "$(RECSIM=0)")
    field(PINI, "YES")
}

record(bo, "$(P)DISABLE")
{
    field(DESC, "Disable comms")
    field(PINI, "YES")
    field(VAL, "$(DISABLE=0)")
    field(OMSL, "supervisory")
    field(ZNAM, "COMMS ENABLED")
    field(ONAM, "COMMS DISABLED")
}

#################################
# 2. FLOWRATE
#################################
#
# The flowrate of the device can be change at any point using the FLOWRATE:SP
# command (even while the device is pumping). Refer to Sec.5 "File" for details.
#
#
record(ai, "$(P)FLOWRATE") 
{
    field(DESC, "Current pump flowrate in mL/min")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    
    field(INP, "@jsco4180.proto getFlowrate $(PORT)")
    
    field(PREC, "3")
    field(EGU, "mL/min")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    info(alarm, "JSCO4180")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FLOWRATE")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)FLOWRATE:SP") 
{
    field(DESC, "Set the pumps flow rate in mL/min")
    field(DTYP, "stream")
    field(DRVH, "10.000")
    field(DRVL, "0.000")
    field(VAL, "0.010")
    
    field(OUT, "@jsco4180.proto setFlowrate($(P)) $(PORT)")
    
    field(PREC, "3")
    field(EGU, "mL/min")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FLOWRATE:SP")
    field(SDIS, "$(P)DISABLE")
	field(FLNK, "$(P)FLOWRATE:SP:RBV")
}

record(fanout, "$(P)SCAN")
{
    field(SCAN, "1 second")
	field(LNK0, "$(P)FLOWRATE:SP:RBV")
}
 
record(ai, "$(P)FLOWRATE:SP:RBV") 
{
    field(DESC, "Pump flowrate in mL/min")
    field(DTYP, "stream")
    field(SCAN, "Passive")
    
    field(INP, "@jsco4180.proto getFlowrateRBV $(PORT)")
    
    field(PREC, "3")
    field(EGU, "mL/min")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    info(alarm, "JSCO4180")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:FLOWRATE:SP:RBV")
    field(SDIS, "$(P)DISABLE")
}

#################################
# 3. PRESSURE
#################################

record(ai, "$(P)PRESSURE") 
{
    field(DESC, "Current pressure in kg/cm^2")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    
    field(INP, "@jsco4180.proto getPressure $(PORT)")
    
    field(EGU, "kg/cm^2")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PRESSURE")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)PRESSURE:MAX") 
{
    field(DESC, "Maximum pressure in kg/cm^2")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    
    field(INP, "@jsco4180.proto getPressureMax $(PORT)")
    
    field(EGU, "kg/cm^2")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PRESSURE:MAX")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)PRESSURE:MAX:SP") 
{
    field(DESC, "Set the maximum pressure in kg/cm^2")
    field(DTYP, "stream")
    field(DRVH, "700")
    field(DRVL, "0")
    field(VAL, "400")
    
    field(OUT, "@jsco4180.proto setPressureMax $(PORT)")
    
    field(EGU, "kg/cm^2")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PRESSURE:MAX:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)PRESSURE:MAX", "$(P)PRESSURE:MAX:SP:RBV")

record(ai, "$(P)PRESSURE:MIN") 
{
    field(DESC, "Minimum pressure in kg/cm^2")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    
    field(INP, "@jsco4180.proto getPressureMin $(PORT)")
    
    field(EGU, "kg/cm^2")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PRESSURE:MIN")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)PRESSURE:MIN:SP") 
{
    field(DESC, "Set the minimum pressure in kg/cm^2")
    field(DTYP, "stream")
    field(DRVH, "700")
    field(DRVL, "0")
    field(VAL, "1")
    
    field(OUT, "@jsco4180.proto setPressureMin $(PORT)")
    
    field(EGU, "kg/cm^2")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:PRESSURE:MIN:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)PRESSURE:MIN", "$(P)PRESSURE:MIN:SP:RBV")

#################################
# 4. PUMP CONTROL
#################################
#
# The device has the ability to run files (programs) or continuously pump.
# However, the gradients can only be updated from a file (program). To create
# a simple general user interface the START:SP, TIMED:SP, and, STOP:SP records
# are used to control the pump. The reason for this is that they are sseq reco
# -rds that will generate a program to update the set points and execute it. 
# 
# The ability to create user programs and run them using _PUMP:SP is still 
# available.
#
record (mbbi, "$(P)STATUS")
{
    field(DESC, "Pump status")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    
    field(INP, "@jsco4180.proto getStatus $(PORT)")
    
    field(ZRVL, "0")
    field(ZRST, "Off")

    field(ONVL, "1") # Pump on (no program)
    field(ONST, "Pumping")
    
    field(TWVL, "33") # Initial Run (i.e., Program run with time halted)
    field(TWST, "Pumping")
    
    field(THVL, "49") # Program Run (running program with incrementing time)
    field(THST, "Pumping")
    
    field(SDIS, "$(P)DISABLE")
}

record(mbbo, "$(P)_PUMP:SP") 
{
    field(DESC, "Pump control")
    field(DTYP, "stream")
    field(VAL, "1")

    field(ZRVL, "0")
    field(ZRST, "On")
    
    field(ONVL, "1")
    field(ONST, "Off")
    
    field(TWVL, "2")
    field(TWST, "Hold")
    
    field(THVL, "3")
    field(THST, "Rerun")
    
    field(SXVL, "6")
    field(SXST, "InitialRun")
    
    field(SVVL, "7")
    field(SVST, "ProgramRun")
    
    field(EIVL, "8")
    field(EIST, "ResetReRun")
    
    field(OUT, "@jsco4180.proto setPump $(PORT)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:_PUMP:SP")
    field(SDIS, "$(P)DISABLE")
}
alias("$(P)_PUMP:SP", "$(P)_PUMP")

record(ao, "$(P)_TEST_CRASH")
{
    field(DESC, "Crash the real device")
    field(DTYP, "stream")
    
    field(OUT, "@jsco4180.proto testCrash $(PORT)")
}

record(bo, "$(P)START:SP")
{
    field(DESC, "Start the pump")
    field(DTYP, "stream")
    
    field(ZNAM, "")
    field(ONAM, "Start")
    
    field(OUT, "@jsco4180.proto executeProgram($(P)COMP:,A:SP,B:SP,C:SP,6) $(PORT)")
    
    info(INTEREST, "HIGH")
}
alias("$(P)START:SP", "$(P)START")

record(bo, "$(P)STOP:SP")
{
    field(DESC, "Stop the pump")
    field(DTYP, "stream")
    
    field(ZNAM, "")
    field(ONAM, "Stop")
    
    field(OUT, "@jsco4180.proto executeProgram($(P)COMP:,A:SP,B:SP,C:SP,1) $(PORT)")
    
    info(INTEREST, "HIGH")
}
alias("$(P)STOP:SP", "$(P)STOP")

record(bo, "$(P)PUMP_FOR_TIME:SP") 
{
    field(DESC, "Start timed pump for set time or volume")
    field(DTYP, "stream")
    
    field(ZNAM, "")
    field(ONAM, "Start")
    
    field(OUT, "@jsco4180.proto executeProgram($(P)COMP:,A:SP,B:SP,C:SP,8) $(PORT)")
    field(FLNK, "$(P)TIME:RUN:SP")
    
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TIMED:SP")
    field(SDIS, "$(P)DISABLE")
    
    info(INTEREST, "HIGH")
}
alias("$(P)PUMP_FOR_TIME:SP", "$(P)PUMP_FOR_TIME")

record(bo, "$(P)PUMP_SET_VOLUME:SP") 
{
    field(DESC, "Start timed pump for set time or volume")
    field(DTYP, "stream")
    
    field(ZNAM, "")
    field(ONAM, "Start")
    
    field(OUT, "@jsco4180.proto executeProgram($(P)COMP:,A:SP,B:SP,C:SP,8) $(PORT)")
    field(FLNK, "$(P)TIME:VOL:SP")
    
    field(SIML, "$(P)SIM")
    field(SDIS, "$(P)DISABLE")
    info(INTEREST, "HIGH")
}
alias("$(P)PUMP_SET_VOLUME:SP", "$(P)PUMP_SET_VOLUME")

record(ao, "$(P)RESET:SP")
{
    field(DESC, "Reset pump to initial conditions")
    field(DTYP, "stream")
    
    field(OUT, "@jsco4180.proto reset $(PORT)")
    
    info(INTEREST, "HIGH")
    field(SDIS, "$(P)DISABLE")
    
    field(EGU, "")
}
alias("$(P)RESET:SP", "$(P)RESET")

#################################
# 5. FILE CONTROL
#################################
#
# Set the currently selected program or open/close files.
record(bo, "$(P)FILE:OPEN:SP")
{
    field(DESC, "Open or close selected file")
    field(DTYP, "stream")
    
    field(OUT, "@jsco4180.proto setFileState $(PORT)")
    
    field(ZNAM, "Closed")
    field(ONAM, "Open")
    
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)FILE:SP")
{
    field(DESC, "Select program file")
    field(DTYP, "stream")
    
    field(OUT, "@jsco4180.proto setFileNumber $(PORT)")
    
    field(SDIS, "$(P)DISABLE")   
}

#################################
# 6. PROGRAM RUN-TIME
#################################
#
# The device will return the current program runtime (TIME) which is used to
# determine if the runtime for the users desired runtime (TIME:RUN:SP) 
# duration or set volume (TIME:VOL:SP) has been reached.
#
record(ai, "$(P)TIME")
{
    field(DESC, "Elapsed program runtime")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    
    field(INP, "@jsco4180.proto getTime $(PORT)")
    
    field(FLNK, "$(P)TIME:RUN:CHECK")
    field(EGU, "s")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TIME")
    field(SDIS, "$(P)DISABLE")
}

# This record is updated when a user sets either a desired runtime set point (TIME:RUN:SP) or a 
# desired volume pump (TIME:VOL:SP) and represents the target runtime we use to calculate how
# much time is remaining and when to stop the pump program.
record(ai, "$(P)TIME:TARGET_RUNTIME")
{
    field(DESC, "The target runtime for the pump")
    field(EGU, "s")
    info(INTEREST, "MEDIUM")
}

record(ao, "$(P)TIME:RUN:SP")
{
    field(DESC, "Pump runtime in seconds")
    field(DTYP, "Soft Channel")
    field(DRVL, "1")
    field(DRVH, "1000000")
    field(OUT, "$(P)TIME:TARGET_RUNTIME PP")
    
    field(EGU, "s")
    field(FLNK, "$(P)TIME:RUN:CALCVOL")
    info(INTEREST, "HIGH")
}
alias("$(P)TIME:RUN:SP", "$(P)TIME:RUN:SP:RBV")

record(ao, "$(P)TIME:VOL:SP")
{
    field(DESC, "Pump set volume in mL")
    field(DTYP, "Soft Channel")
    field(DRVL, "0.001")
    field(DRVH, "1000.000")
    field(VAL, "0.010")
    
    field(EGU, "mL")
    field(PREC, "3")
    field(FLNK, "$(P)TIME:VOL:CALCRUN")
    info(INTEREST, "HIGH")
}
alias("$(P)TIME:VOL:SP", "$(P)TIME:VOL:SP:RBV")

record(calcout, "$(P)TIME:RUN:CHECK")
{
    field(DESC, "Stop pump if we have reached runtime")
    field(DTYP, "Soft Channel")
    field(INPA, "$(P)TIME")
    field(INPB, "$(P)TIME:TARGET_RUNTIME")
    field(INPC, "$(P)STATUS")
    
    field(CALC, "(A>=B)&&(C#0||1)?1:0")
    
    field(OUT, "$(P)STOP:SP PP")
    field(OOPT, "Transition To Non-zero")
    field(FLNK, "$(P)TIME:REMAINING")
    field(ASG, "READONLY")
}

record(calc, "$(P)TIME:REMAINING")
{
    field(DESC, "Remaining pump time")
    field(INPA, "$(P)TIME")
    field(INPB, "$(P)TIME:TARGET_RUNTIME")
    field(INPC, "$(P)STATUS")
    
    field(CALC, "C=0?0:(B-A)")
    field(EGU, "s")
    field(FLNK, "$(P)VOL:REMAINING")
    info(INTEREST, "HIGH")
    field(ASG, "READONLY")
}

record(calc, "$(P)VOL:REMAINING")
{
    field(DESC, "Remaining volume")
    field(INPA, "$(P)TIME:REMAINING")
    field(INPB, "$(P)FLOWRATE")
    field(INPC, "$(P)STATUS")
    
    field(CALC, "C=0?0:((A*B)/60)")
    field(EGU, "mL")
    field(PREC, "3")
    info(INTEREST, "HIGH")
    field(ASG, "READONLY")
}

record(calcout, "$(P)TIME:VOL:CALCRUN")
{
    field(DESC, "Calculate runtime for volume")
    field(INPA, "$(P)TIME:VOL:SP")
    field(INPB, "$(P)FLOWRATE:SP:RBV CP")
    field(OUT,  "$(P)TIME:TARGET_RUNTIME PP")
    
    field(CALC, "(A/B)*60")
    
    field(EGU, "s")
    field(PREC, "3")	
	
    field(ASG, "READONLY")
}

record(calc, "$(P)TIME:RUN:CALCVOL")
{
    field(DESC, "Calculate vol (mL) for runtime")
    field(INPA, "$(P)TIME:RUN:SP")
    field(INPB, "$(P)FLOWRATE:SP:RBV CP")
    
    field(CALC, "(A*B)/60")
    
	field(EGU, "mL")
    field(PREC, "3")
	
    field(ASG, "READONLY")
}

#################################
# 7. COMPOSITION GRADIENTS
#################################
#
# The components A, B, and, C can be change only during a program execution.
# The COMP:SP relates to a ramped change in compositions that is used only 
# in a saved program. Refer to Sec.5 "File" for details.
#
# NB: Component D is auto-calculated by the device.
#
record(ai, "$(P)COMP:A")
{
    field(DESC, "Component A % device value")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    
    field(INP, "@jsco4180.proto getCompA $(PORT)")
    
    field(EGU, "%")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:COMP:A")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)COMP:A:SP") 
{
    field(DESC, "Component A % set point")
    field(DTYP, "Soft Channel")
    info(INTEREST, "HIGH")
    field(DRVH, "100")
    field(DRVL, "0")
    field(VAL, "100")
    
    field(EGU, "%")
    field(FLNK, "$(P)COMP:D:SP")
    info(autosaveFields, "VAL")
    info(archive, "VAL")
}
alias("$(P)COMP:A:SP", "$(P)COMP:A:SP:RBV")

record(ai, "$(P)COMP:B")
{
    field(DESC, "Component B % device value")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    
    field(INP, "@jsco4180.proto getCompB $(PORT)")
    
    field(EGU, "%")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:COMP:B")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)COMP:B:SP") 
{
    field(DESC, "Component B % set point")
    field(DTYP, "Soft Channel")
    field(DRVH, "100")
    field(DRVL, "0")

    field(EGU, "%")
    field(FLNK, "$(P)COMP:D:SP")
    info(autosaveFields, "VAL")
    info(archive, "VAL")
}
alias("$(P)COMP:B:SP", "$(P)COMP:B:SP:RBV")

record(ai, "$(P)COMP:C")
{
    field(DESC, "Component C % device value")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    
    field(INP, "@jsco4180.proto getCompC $(PORT)")

    field(EGU, "%")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:COMP:C")
    field(SDIS, "$(P)DISABLE")
}

record(ao, "$(P)COMP:C:SP") 
{
    field(DESC, "Component C % set point")  
    field(DTYP, "Soft Channel")
    field(DRVH, "100")
    field(DRVL, "0")

    field(EGU, "%")
    field(FLNK, "$(P)COMP:D:SP")
    info(autosaveFields, "VAL")
    info(archive, "VAL")
}
alias("$(P)COMP:C:SP", "$(P)COMP:C:SP:RBV")

record(ai, "$(P)COMP:D")
{
    field(DESC, "Component D % device value")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    
    field(INP, "@jsco4180.proto getCompD $(PORT)")
    
    field(EGU, "%")
    info(INTEREST, "HIGH")
    info(archive, "VAL")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:COMP:D")
    field(SDIS, "$(P)DISABLE")
}

record(calc, "$(P)COMP:D:SP") 
{
    field(DESC, "Component D % set point")  
    field(HIHI, "101")
    field(LOLO, "-1")
    
    field(INPA, "$(P)COMP:A:SP:RBV")
    field(INPB, "$(P)COMP:B:SP:RBV")
    field(INPC, "$(P)COMP:C:SP:RBV")

    field(CALC, "100-(A+B+C)")
    field(ASG, "READONLY")
    field(EGU, "%")
	field(FLNK, "$(P)COMP:ALLOWED")
    info(INTEREST, "HIGH")
    info(autosaveFields, "VAL")
    info(archive, "VAL")
}
alias("$(P)COMP:D:SP", "$(P)COMP:D:SP:RBV")

record(calcout, "$(P)COMP:ALLOWED")
{
    field(INPA, "$(P)COMP:D:SP")
	field(CALC, "A<0")
	field(OUT, "$(P)DISABLE_PUMP PP")
}

record(dfanout, "$(P)DISABLE_PUMP")
{
	field(OUTA, "$(P)START:SP.DISP")
	field(OUTB, "$(P)PUMP_FOR_TIME:SP.DISP")
	field(OUTC, "$(P)PUMP_SET_VOLUME:SP.DISP")
}

#################################
# 8. ERROR INFORMATION
#################################
#
# When the pump experiences a problem during operation, it will automatically
# transmit an appropriate corresponding trouble message to the remote controller.
#
# The following records handle this:
#
#      ERROR - Error returned from the device from the getError command.
#
#   ERROR:SP - If the device receives a trouble message, the controller must clear
#              the trouble status.
#
#  ERROR:STR - The device can return error strings in the event of an input or 
#              spontaneous error.
#
# ERROR:COMP - If the device is in a mode where components cannot be set there is 
#              a state machine that will check if the components are within a user
#              defined tolerance (ERROR:TOL) and attempt to reset the components 3
#              times with a delay (ERROR:DELAY).
#
record(mbbi, "$(P)ERROR") 
{
    field(DESC, "Device error status")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    
    field(ZRVL, "0")
    field(ZRST, "No error")
    
    field(ONVL, "1")
    field(ONST, "Over press")
    field(ONSV, "MAJOR")
    
    field(TWVL, "2")
    field(TWST, "Under press")
    field(TWSV, "MAJOR")
    
    field(FRVL, "4")
    field(FRST, "Hardware error")
    field(FRSV, "MAJOR")
    
    field(EIVL, "8")
    field(EIST, "Pump timer off")
    field(EISV, "MAJOR")

    field(INP, "@jsco4180.proto getError $(PORT)")

    info(archive, "VAL")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:ERROR")
    field(SDIS, "$(P)DISABLE")
}

record(bo, "$(P)ERROR:SP") 
{
    field(DESC, "Reset auto-error state")
    field(DTYP, "stream")
    field(ZNAM, "")
    field(ONAM, "Reset")
    
    field(OUT, "@jsco4180.proto setError $(PORT)")
    
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:ERROR:SP")
    field(SDIS, "$(P)DISABLE")
}

alias("$(P)ERROR:SP", "$(P)ERROR:SP:RBV")

record(stringin, "$(P)ERROR:STR") 
{
    field(DESC, "Last error returned on input")
    field(DTYP, "stream")
    field(SCAN, "I/O Intr")
    field(VAL, "No error")
    
    field(INP, "@jsco4180.proto readErrorStr $(PORT)")

    info(archive, "VAL")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:ERROR:STR")
    field(SDIS, "$(P)DISABLE")
}

record(bi, "$(P)ERROR:COMP") 
{
    field(DESC, "Device component error")
    field(DTYP, "Soft Channel")
    field(VAL, "0")
    
    field(ZNAM, "No issue")
    
    field(ONAM, "Single Channel")
    field(OSV, "MAJOR")

    info(archive, "VAL")
    info(INTEREST, "HIGH")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:ERROR:COMP")
    field(SDIS, "$(P)DISABLE")
}

record(ai, "$(P)ERROR:DELAY")
{
    field(DESC, "Delay before trying to reset components")
    field(VAL, "10")
    
    field(PINI, "YES")
}

record(ai, "$(P)ERROR:TOL")
{
    field(DESC, "Tolerance between comp SP and RBV")
    field(VAL, "0.1")
    
    field(PINI, "YES")
}

#################################
# 9. SIMULATION RECORDS
#################################
#
record(mbbo, "$(P)SIM:_PUMP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:_PUMP","$(P)SIM:_PUMP:SP")

record(ao, "$(P)SIM:_VALVE:POS:SP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:TIME")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:PRESSURE:MAX")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:PRESSURE:MAX","$(P)SIM:PRESSURE:MAX:SP")

alias("$(P)SIM:PRESSURE:MAX","$(P)SIM:PRESSURE:MAX:SP:RBV")

record(ai, "$(P)SIM:PRESSURE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:COMP:A")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:COMP:A","$(P)SIM:COMP:A:SP")

alias("$(P)SIM:COMP:A","$(P)SIM:COMP:A:SP:RBV")

record(ai, "$(P)SIM:COMP:B")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:COMP:B","$(P)SIM:COMP:B:SP")

alias("$(P)SIM:COMP:B","$(P)SIM:COMP:B:SP:RBV")

record(ai, "$(P)SIM:COMP:D")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:VALVE:POS")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:VALVE:POS","$(P)SIM:VALVE:POS:SP")

alias("$(P)SIM:VALVE:POS","$(P)SIM:VALVE:POS:SP:RBV")

record(mbbi, "$(P)SIM:ERROR")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:ERROR","$(P)SIM:ERROR:SP")

alias("$(P)SIM:ERROR","$(P)SIM:ERROR:SP:RBV")

record(bo, "$(P)SIM:COMP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:COMP","$(P)SIM:COMP:SP")

record(ai, "$(P)SIM:FLOWRATE")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:FLOWRATE:SP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:FLOWRATE:SP","$(P)SIM:FLOWRATE:SP:RBV")

record(ai, "$(P)SIM:COMP:C")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:COMP:C","$(P)SIM:COMP:C:SP")

alias("$(P)SIM:COMP:C","$(P)SIM:COMP:C:SP:RBV")

record(stringin, "$(P)SIM:ERROR:STR")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

record(ai, "$(P)SIM:PRESSURE:MIN")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}

alias("$(P)SIM:PRESSURE:MIN","$(P)SIM:PRESSURE:MIN:SP")

alias("$(P)SIM:PRESSURE:MIN","$(P)SIM:PRESSURE:MIN:SP:RBV")

record(mbbi, "$(P)SIM:ERROR:COMP")
{
    field(SCAN, "Passive")
    field(DTYP, "Soft Channel")
}
